# .github/workflows/android.yml
name: Build Android APK

on:
  push:
    branches: [feature/ci-cd]

  pull_request:
    branches: [main, feature/ci-cd]

  workflow_dispatch:
    inputs:
      runnerType:
        description: "Select Runner"
        required: true
        default: "ubuntu-latest"
        type: choice
        options:
          - ubuntu-latest
          - macos-latest
          - windows-latest

      environment:
        description: "App environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - development

env:
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  GOOGLE_APPLICATION_KEY: ${{ secrets.GOOGLE_APPLICATION_KEY }}
  KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
  API_URL: ${{ vars.API_URL }}
  NODE_ENV: ${{ vars.NODE_ENV }}
  VERSION_CODE: ${{ vars.VERSION_CODE }}
  VERSION_NAME: ${{ vars.VERSION_NAME }}
  SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
  SLACK_BOT_TOKEN: ${{ vars.SLACK_BOT_TOKEN }}
  SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID}}

jobs:
  build-dev:
    if: inputs.environment != 'production'
    environment: development
    name: Build Development Android APK
    runs-on: ${{ inputs.runnerType || 'ubuntu-latest' }}

    # ‚¨áÔ∏è Set default working directory to FluxStore/
    defaults:
      run:
        working-directory: FluxStore

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      # - name: üü¢ Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 20
      #     cache: "yarn"
      #     cache-dependency-path: ./FluxStore/yarn.lock

      # - name: üü¢ Set up JDK 17
      #   uses: actions/setup-java@v4
      #   with:
      #     java-version: "17"
      #     distribution: "temurin"
      #     cache: gradle

      # - name: üì¶ Install Yarn
      #   run: |
      #     npm install -g yarn
      #     yarn -v

      # - name: üì¶ Install dependencies
      #   run: yarn install

      # - name: üß™ Run testing
      #   run: yarn test

      # - name: üìÑ Write .env file
      #   run: echo "API_URL=$API_URL" > .env

      # - name: ‚öôÔ∏è Setup Android SDK
      #   uses: android-actions/setup-android@v3

      # - name: üèóÔ∏è Build Debug APK
      #   run: |
      #     cd android
      #     ./gradlew assembleDebug

      # - name: üì§ Upload Debug APK
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: app-debug.apk
      #     path: FluxStore/android/app/build/outputs/apk/debug/app-debug.apk
      #     retention-days: 5
      #     overwrite: true

      - name: üì£ Send Slack Message Build Debug
        if: success() || failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "${{ job.status == 'success' && ':white_check_mark: *Build Debug Succeeded!* :rocket:' || ':x: *Build Debug Failed!* :fire:' }}\n‚Ä¢ Repo: `${{ github.repository }}`\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Actor: `${{ github.actor }}`"
            }
        env:
          SLACK_BOT_TOKEN: ${{ vars.SLACK_BOT_TOKEN }}

      - name: üêû Debug Slack Call
        run: |
          curl -X POST https://slack.com/api/chat.postMessage \
          -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
          -H 'Content-type: application/json' \
          --data '{
            "channel": "all-github",
            "text": "Testing bot message"
          }'
          $SLACK_WEBHOOK_URL
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  build-prod:
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'production'
    environment: ${{inputs.environment}}
    name: Build Android APK (${{inputs.environment}})
    runs-on: ${{ inputs.runnerType}}

    # ‚¨áÔ∏è Set default working directory to FluxStore/
    defaults:
      run:
        working-directory: FluxStore

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"
          cache-dependency-path: ./FluxStore/yarn.lock

      - name: üü¢ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: üì¶ Install Yarn
        run: |
          npm install -g yarn
          yarn -v

      - name: üì¶ Install dependencies
        run: NODE_ENV=development yarn install --frozen-lockfile

      - name: üìÑ Write .env file
        run: echo "API_URL=$API_URL" > .env

      - name: üîê Decode Keystore & Create key.properties
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/my-release-key.keystore
          cat <<EOF > android/key.properties
          storeFile=my-release-key.keystore
          storePassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          keyPassword=$KEY_PASSWORD
          versionCode=$VERSION_CODE
          versionName=$VERSION_NAME
          EOF

      - name: ‚öôÔ∏è Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: üèóÔ∏è Build Release APK
        run: |
          cd android
          ./gradlew assembleRelease

      - name: üì§ Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: FluxStore/android/app/build/outputs/apk/release/app-release.apk
          retention-days: 5
          overwrite: true

      - name: üì£ Send Slack Message Build Release
        if: success() || failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "${{ job.status == 'success' && ':white_check_mark: *Build Release Succeeded!* :rocket:' || ':x: *Build Release Failed!* :fire:' }}\n‚Ä¢ Repo: `${{ github.repository }}`\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Actor: `${{ github.actor }}`"
            }
        env:
          SLACK_BOT_TOKEN: ${{ vars.SLACK_BOT_TOKEN }}

  deploy:
    needs: build-prod
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'production'
    environment: production
    name: Deploy to Firebase
    runs-on: ${{inputs.runnerType}}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚¨áÔ∏è Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release.apk

      - name: üîê Write Firebase Credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_KEY }}" > $HOME/firebase.json

      - name: üîê Set GOOGLE_APPLICATION_CREDENTIALS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase.json" >> $GITHUB_ENV

      - name: üöÄ Install Firebase CLI
        run: npm install -g firebase-tools

      - name: ‚¨ÜÔ∏è Distribute APK
        run: |
          firebase appdistribution:distribute app-release.apk \
            --app $FIREBASE_APP_ID \
            --groups testers

      - name: üì£ Send Slack Message Deploy
        if: success() || failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "${{ job.status == 'success' && ':white_check_mark: *Deploy Succeeded!* :rocket:' || ':x: *Deploy Failed!* :fire:' }}\n‚Ä¢ Repo: `${{ github.repository }}`\n‚Ä¢ Branch: `${{ github.ref_name }}`\n‚Ä¢ Actor: `${{ github.actor }}`"
            }
        env:
          SLACK_BOT_TOKEN: ${{ vars.SLACK_BOT_TOKEN }}
  notify:
    if: github.event_name == 'pull_request'
    environment: ${{inputs.environment || 'development'}}
    name: üì£ Slack Notification
    runs-on: ${{ inputs.runnerType || 'ubuntu-latest' }}

    steps:
      - name: üì£ Send Slack Message Pull Request
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": ":bell: *Pull request opened by ${{ github.event.pull_request.user.login }}*\n‚Ä¢ PR Title: `${{ github.event.pull_request.title }}`\n‚Ä¢ PR #: #${{ github.event.pull_request.number }}\n‚Ä¢ Branch: `${{ github.head_ref }}` ‚Üí `${{ github.base_ref }}`\n‚Ä¢ Action: `${{ github.event.action }}`\n‚Ä¢ URL: <${{ github.event.pull_request.html_url }}|View Pull Request>"
            }
        env:
          SLACK_BOT_TOKEN: ${{ vars.SLACK_BOT_TOKEN }}
