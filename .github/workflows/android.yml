# .github/workflows/android.yml
name: Android CI

on:
  push:
    branches: [main, feature/*ci-cd]
  pull_request:
    branches: [main, feature/*ci-cd]

  workflow_dispatch:
    inputs:
      chosen-os:
        description: "Description workflow_dispatch"
        required: true
        type: choice
        options:
          - Ubuntu
          - macOS
env:
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
  KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
  API_URL: ${{ vars.API_URL }}
  NODE_ENV: ${{ vars.NODE_ENV }}

jobs:
  testing:
    environment: testing
    name: Testing examples
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: FluxStore
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Show example env
        run: |
          echo "API_URL = $API_URL"
          echo "NODE_ENV = $NODE_ENV"
          echo "FIREBASE_TOKEN = $FIREBASE_TOKEN"
          echo "FIREBASE_APP_ID = $FIREBASE_APP_ID"
          echo "GOOGLE_APPLICATION_CREDENTIALS_JSON = $GOOGLE_APPLICATION_CREDENTIALS_JSON"
          echo "KEYSTORE_PASSWORD = $KEYSTORE_PASSWORD"
          echo "KEY_ALIAS = $KEY_ALIAS"
          echo "KEY_PASSWORD = $KEY_PASSWORD"

  build-dev:
    if: github.event_name == 'workflow_dispatch'
    needs: testing
    environment: build-dev
    name: Build Development Android APK
    runs-on: ubuntu-latest

    # ⬇️ Set default working directory to FluxStore/
    defaults:
      run:
        working-directory: FluxStore

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install Yarn
        run: npm install -g yarn

      - name: 📦 Install dependencies
        run: yarn install

      - name: 🧪 Print Environment Info
        run: |
          echo "NODE_ENV=$NODE_ENV"
          echo "API_URL=$API_URL"
          echo "ENV_SECRET=$ENV_SECRET"
          echo "FIREBASE_TOKEN=$FIREBASE_TOKEN"
          echo "FIREBASE_APP_ID=$FIREBASE_APP_ID"
          echo "GOOGLE_APPLICATION_CREDENTIALS_JSON = $GOOGLE_APPLICATION_CREDENTIALS_JSON"
          echo "KEYSTORE_PASSWORD = $KEYSTORE_PASSWORD"
          echo "KEY_ALIAS = $KEY_ALIAS"
          echo "KEY_PASSWORD = $KEY_PASSWORD"

      - name: 📄 Write .env file
        run: echo "API_URL=$API_URL" > .env

      - name: ⚙️ Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🏗️ Build Debug APK
        run: |
          cd android
          ./gradlew assembleDebug

      - name: 📤 Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: FluxStore/android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 5

  build-prod:
    needs: testing
    # if: github.event_name == 'workflow_dispatch'
    environment: build-prod
    name: Build Production Android APK
    runs-on: ubuntu-latest

    # ⬇️ Set default working directory to FluxStore/
    defaults:
      run:
        working-directory: FluxStore

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔢 Generate versionCode & versionName
        id: versioning
        run: |
          VERSION_CODE=$(git rev-list --count HEAD)
          VERSION_NAME="1.0.${VERSION_CODE}"
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"
          cache-dependency-path: ./FluxStore/yarn.lock

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: 📦 Install Yarn
        run: |
          npm install -g yarn
          yarn -v

      - name: 📦 Install dependencies
        run: NODE_ENV=development yarn install --frozen-lockfile

      - name: 📄 Write .env file
        run: echo "API_URL=$API_URL" > .env

      - name: 🔐 Decode Keystore & Create key.properties
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/my-release-key.keystore
          cat <<EOF > android/key.properties
          storeFile=my-release-key.keystore
          storePassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          keyPassword=$KEY_PASSWORD
          EOF

      - name: ⚙️ Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🏗️ Build Release APK
        run: |
          cd android
          ./gradlew assembleRelease \
            -PVERSION_CODE=$VERSION_CODE \
            -PVERSION_NAME=$VERSION_NAME

      - name: 📤 Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: FluxStore/android/app/build/outputs/apk/release/app-release.apk
          retention-days: 1

  deploy:
    needs: build-prod
    # if: github.event_name == 'workflow_dispatch'
    environment: build-prod
    name: Deploy to Firebase
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release.apk
      - name: 🔐 Write Firebase Credentials
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" > $HOME/firebase.json

      - name: 🔐 Set GOOGLE_APPLICATION_CREDENTIALS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase.json" >> $GITHUB_ENV

      - name: 🚀 Install Firebase CLI
        run: npm install -g firebase-tools

      - name: 📤 Distribute APK
        run: |
          firebase appdistribution:distribute app-release.apk \
            --app $FIREBASE_APP_ID \
            --groups testers
